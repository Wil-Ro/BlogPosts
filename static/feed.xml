<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Rosia Evans Blog</title>
  <link href="https://rosia.me/"/>
  <updated>2024-08-01T19:34:50Z</updated>
  <author>
    <name>Rosia Evans</name>
  </author>
  <id>https://rosia.me/</id>





<entry>
<title>Tower defence game</title>
<link href="https://rosia.me/CatTowerDefence.html"/>
<id>https://rosia.me/CatTowerDefence.html</id>
<updated>2023-09-23T12:40:24Z</updated>
<content type="html">
<h1>Tower defence game</h1>
<h2>What it is</h2>
<p>A tower defence game, mostly created over the course of 1-2 months to allow myself and a friend to gain a better understanding of python. Players can place cats to attack balls of wool rolling along a path. Cats can
be upgraded with different upgrade paths and can be deleted to allow  for a partial refund. The tower system was designed to be easily expanded and altered along with a rudimentary map file system that allowed users to
add maps of their own design. Although a functional prototype was created, no artist was ever found to allow for a proper art pass or visual redesign so the project never left this first phase.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/YUKdlVf9n30" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<h2>What I did</h2>
<p>Almost all of the project was a team effort with I and my friend sharing ideas and working on the same code in a pair programming set-up, swapping and working off each others ideas. I proposed alot of the original logic behind the movement
systems, the level select menu and the file structure for custom maps along with alot of the smaller features such as tower placement and selection. These proposals were built off by both myself and my partner as the system
evolved in complexity and scale.</p>
</content>
</entry><entry>
<title>EPQ Project</title>
<link href="https://rosia.me/EPQProject.html"/>
<id>https://rosia.me/EPQProject.html</id>
<updated>2023-09-23T12:42:03Z</updated>
<content type="html">
<h1>EPQ Project</h1>
<h2>What it is</h2>
<p>This project was completed for my Extended Project Equalification (also known as EPQ). During the EPQ, a student will pick a subject of their choice, research it and then either write a paper or create a piece of media
(an &quot;artefact&quot;) based on what they have learnt. For my subject I originally chose physics simulation as at the time I lacked confidence in maths and wanted to force myself to relearn and become more comfortable with it.
The idea of combining VR with this later came about in an attempt to make the project more modern so more primary research and testing could be done.<br><br></p>
<p>The end result was a system that allowed the user to interact with a virtual environment with 6 degrees of freedom, they could pick up, move and throw objects with their fingers, hands and head being fully tracked to the
real world. Due to time restraints, the physics simulation was released separately and, although fully capable of location and force calculation, could not take rotation of objects into account. The project was given a high A grade.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/pSlHM0kMijA" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<h2>What I did</h2>
<p>Over the course of 4-5 months I researched and taught myself a large amount of vector maths, the basics of C++, the basics of physics engines, a large portion of Blender and Unreal Engines toolset,
a small amount of 3D rendering theory and the basics of game design for virtual reality. Using this I created a fully functional VR interaction system with many custom made assets, materials and classes as well as a
very basic physics engine built in C++.</p>
</content>
</entry><entry>
<title>AardvarkXR</title>
<link href="https://rosia.me/Aardvark.html"/>
<id>https://rosia.me/Aardvark.html</id>
<updated>2023-09-23T12:35:38Z</updated>
<content type="html">
<h1>AardvarkXR</h1>
<h2>What it is</h2>
<p>Aardvark is a development framework, currently in alpha, designed to allow users to open small apps (known as gadgets) over the top of virtual reality programs or games. You could think of it as a mobile phone for use within
any vr software, its main focus is providing small utilities such as calculators or note taking apps. Developers can create apps for Aardvark using web code which it then renders over the users view, these renders can be 2D
or 3D which is a rather big positive as steamVR doesnt support 3D rendering on overlays so Aardvark has to do this itself. Due to all the code being webbased and run on servers, all gadgets are innately multi-user (with a small amount
of work from the developer) and when in social vr apps, people can open gadgets that will be seen by all other users within that program.</p>
<p>I was first introduced to Aardvark through a hackathon the developers ran on its inital release to the public in an attempt to gain developers to create basic apps for it, and since then I have periodically revisited it
when ideas for gadgets come to mind. When taking part in the first hackathon I had little to no experience with javascript or html, let alone typescript (the main language used for Aardvark development), so I was required
to teach myself over the course of the 3 days the hackathon ran for.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/pux6RbySUMU" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<h2>What I did</h2>
<p>During the first hackathon I proposed and worked on an audio visualiser tool that would run in the background of the users environment as they worked, reacting to their desktop audio. I also designed and created 3D models for other
developers programs, such as icons for a playing card app; one of the first apps to be published on the platform.</p>
<p>Around 4 months later I revisited Aardvark to create a photo viewing app which was originally a personal project but became a team effort with another member of the community who offered
to join development, the app allowed users to upload images which were stored using ipfs (a decentralized storage system) and had multi-user functionality allowing different people to show each other photos. The main idea of the program was to allow vr artists to
open reference images within their prospective drawing apps.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/E3gw_GXHH1s" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<p>As well as this I have also worked on the base code of the project itself. Originally Aardvark had the user open its Ui through a button on their hand which took up valuable visual space used by alot of other programs.
I was tasked with creating a more intuitive solution which ended up being a gesture based system. With little to no guidance I had to read and gain a full understanding of the projects mid-level inner workings and
rewrite large sections of it. After a week or so I produced a gesture system that allowed the user to bump the ends of their controllers together to open and close the menu. I also created a developer tool to allow
developers to tweak the gesture to ensure it worked for their specific controllers.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/9uG2HSavA1U" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<iframe width="560" height="315" src="https://www.youtube.com/embed/FzQcE9UeOao" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</content>
</entry><entry>
<title>Mind Map Maker</title>
<link href="https://rosia.me/MindMap.html"/>
<id>https://rosia.me/MindMap.html</id>
<updated>2023-10-11T12:47:33Z</updated>
<content type="html">
<h1>Mind Map Maker</h1>
<p>This project was completed for my computer science A-level. Students had to find a client and create a program for them, I chose my sister and created software to help her revise for her GCSE's.
The software had to:</p>
<ul>
<li>run on her Â£70 laptop</li>
<li>allow for files to be transfered between devices</li>
<li>allow actions to be undone and redone</li>
<li>be generic enough to work for any subject</li>
</ul>
<p>At the time I was finding myself really interested in intuitive UI design so I also aimed to create a simple and unrestrictive system that I felt was easy to learn and use. Though I found I had to cut a lot of it for time constraints.</p>
<p>We were given 24 hours spread over 2 months to create the program and were allowed to choose our own langauges and frameworks.
I chose to write the sofware in Unity as I wanted to learn a new engine and knew that unitys use of scenegraphs
would let me avoud calculating the scaling and positioning of mind map components.</p>
<p>As one of the software requirements was to run on very low end computers I also had to ensure I was creating scripts that would run as efficiently as possible when compiled, so I ended up
finding myself weighing up the strengths and weaknesses of different libraries, often choosing ones with drawbacks in favour of their lower usage of memory.</p>
<h2>The outcome</h2>
<iframe width="560" height="315" src="https://www.youtube.com/embed/qIV7RvNZ22c" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<p>The final system had a number of features:</p>
<ul>
<li>Fully working undo/redo system</li>
<li>The ability to create and link text bubbles</li>
<li>The ability to import images</li>
<li>A drawing tool, along with options to optimise lines for slower pcs</li>
<li>A save and load system</li>
<li>A settings panel</li>
<li>The ability to navigate and magnify the mindmap</li>
</ul>
</content>
</entry><entry>
<title>Welcome!</title>
<link href="https://rosia.me/index.html"/>
<id>https://rosia.me/index.html</id>
<updated>2023-10-11T12:33:54Z</updated>
<content type="html">
<h1>Welcome!</h1>
<p>I'm Rosia Evans, this is my site where I log my work for myself and for me to show to others.</p>
<p>This site is generated procedurally from markdown though C++ code I've written and hosted using <a href="https://www.lighttpd.net/">lighttpd</a> on an old laptop through my router. You can find the code for it <a href="https://github.com/Wil-Ro/Blog">here</a> and a more indepth talk about it on <a href="/ThisSite.html">this blog post</a>.</p>
<hr>
<p>I'm currently studying at a small university in wales where I'm doing a BEng in software engineering whilst working on robotics and exploring my own interests on the side through various societies and personal projects.</p>
<img src="profile.jpeg" alt="image of me" style="width:50%">
<p>Nowadays my interests lie mostly in low-power computing and electronics, experimenting with how computers can work in a more environmentally friendly manner. I find the environment is something I think about a lot and finding overlaps between it and my interests in computing has lead me to some really intersting communities.</p>
<p>On the side of this I also enjoy using code to create music through programming using <a href="https://sonic-pi.net/">Sonic-Pi</a> and just creating programs in general with friends and colleagues. Most of my work can either be found in blog-posts here or on my <a href="https://github.com/Wil-Ro">github</a>.</p>
<p>I've previously had interests in VR and XR and UI design, spending a lot of my secondary school years experimenting with both concepts so both websites also have a few probjects relating to those concepts.</p>
<hr>
<p>If you want a basic outline of my work, here are a few interesting projects:</p>
<ul>
<li><a href="/SBSWork.html">My Work at Skipton Building Society</a></li>
<li><a href="/aberComSoc.html">My Work running AberCompSoc</a></li>
<li><a href="/Aardvark.html">AardvarkXR</a></li>
</ul>
<p>To see all of my work, check the navbox to the side.</p>
<p>&lt;-</p>
<h2>DISCLAMER! SITE STILL IN PROGRESS</h2>
<p>This is all a bit everywhere rn, the css will be given some frills at somepoint soon</p>
</content>
</entry><entry>
<title>This Site</title>
<link href="https://rosia.me/ThisSite.html"/>
<id>https://rosia.me/ThisSite.html</id>
<updated>2023-10-08T22:45:47Z</updated>
<content type="html">
<h1>This Site</h1>
<p>This site is a small project I worked on over the course of a few weeks while first returning back to university during my second year. Its hosted on a small <a href="https://www.lighttpd.net/">lighttpd</a> server running on an old laptop from around 2003. I wrote a small C++ program that takes in MarkDown files and builds them into webpages. Everytime the server turns on it pulls from a repo, builds the code and runs it, this then builds the website and puts them in a folder for lighttpd to host.</p>
<h2>The Thoughts Behind This</h2>
<p>During my first year at university I read a lot around the concept of <a href="http://permacomputing.net/">Permacomputing</a>. This is a set of ideas around reusing old computers and writing small systems that avoid <a href="https://en.wikipedia.org/wiki/Software_rot">code rot</a> and use as little power as possible.
The driving idea behind this being that we've had computers that are powerful enough for most small jobs for quite a long time and realistically a lot of old e-waste is still perfectly good for these kind of small low-risk jobs and can be used in an eco-friendly way when worked with correctly. I'd been reading into Permacomputing for a decent while but never properly had the chance to experiment with my thoughts on it.</p>
<p>Along with that I'd also spent time doing a module in my first year on the history of the internet and found the www's origins really inspiring, the idea of a language/system that was easy for just about anyone to learn, that was incredibly simple but super flexible. When learning about this I'd kind of started to feel like we'd lost that part of the internet. Websites are always generated with insane complexity which feels almost unnecessary when we still have that simple flexible system its all built on top of. I wanted to try and use that simple system again, to experience it for myself but also as a nice homage to it.</p>
<h2>The Code</h2>
<p>I wanted the system to be as lightweight and fast as it could be, hopefully leading to a very power-efficient result. I decided to use C++ as it was my main language and was also very fast. I was planning on writing the server code myself but found lighttpd, a relatively old and incredibly light weight server program, as I was researching good libraries and it seemed much more efficient than any of the libraries I could find were benchmarked for so I decided to use that.</p>
<p>I initially planned to write a markdown parser and spent a day or two working on one, writing a <a href="https://en.wikipedia.org/wiki/Simple_API_for_XML">SAX-Style</a> parser. I was unsure whether this was a workable idea for markdown but through thinking about it and planning how it would work I felt quite confident it would be much faster than a DOM parser. I soon found however that it would take most of my time up and I only wanted this to be a small project. I looked online and found [md4c][https://github.com/mity/md4c], a simple and insanely fast parser written in very low level c. It's benchmarks showed it could parse incredibly large documents in less than a millisecond which convinced me pretty quickly. It seemed much faster than any other option but also much simpler. After starting to implement this I discovered it actually parsed markdown text in the same SAX-Style system as I had planned to which made me very happy.</p>
<p>After discovering this I implemented it along with code to read the filesystem and combine the resulting html with a template. This took a few revisions as I wanted to make it as flexible and reusable as possible, making little to no assumptions about the template being given. By default the code searched for an empty <code>&lt;article&gt;</code> body and placed the generated html within it and a similar thing for the <code>&lt;nav&gt;</code> menu. This could then be overwritten by handing in other identifierss to look for.</p>
<p>The code would collect every markdown file, generate a nav menu summarising it then go through each page copying the template and adding that along with its matching markdown/html and writing it to a given file.</p>
<h2>The Hardware And Its OS</h2>
<p>A few months before this project, I found an old laptop in a &quot;free to a good home&quot; box outside someones house. It was very old and originaly ran windows vista but someone had tried to update it to windows 10 and broken it. I took it home as a chance to take it apart and mess around with it but in the end found myself needing a server for this project and this felt perfect.</p>
<p>The main difficulty however was its power-consumption. Its powerconsumption felt like it would be much higher than newly bought lightweight hardware such as a raspberry pi. I spent a lot of time weighing up the differences and decided to try the laptop and measure its power consumption over a length of time. I'm doing this at the moment and will update this section soon.</p>
<p>The other big issue I hit was the operating system. I wanted something as lightweight as possible with little to no un-needed features. This included everything from a desktop to masses of additional packages in things like stock ubuntu. I weighed up a few options including:</p>
<ul>
<li>base debian</li>
<li>raspberry pi OS lite (very stripped down pi os)</li>
<li>arch</li>
</ul>
<p>These each had their own issues, especially including my very minimal experience of linux outside of Pop!_OS which my main driver laptop runs. I was unsure what was included in base debian and what raspberry pi OS lite actually involved with little to know documentation or explanation of it online. I talked to a friend with more linux experience than I and he pointed me to <a href="https://www.alpinelinux.org/">alpine linux</a>. A massively stripped down linux distribution built specifically for lightweight servers and with its own package manager that offered a lighttpd install!</p>
<p>I decided to go for this very quickly as it seemed built specifically for the ideas I was wanting to test out, being incredibly minimalist and low-power.</p>
<h2>Alpine Linux</h2>
<p>Alpine Linux was my first non-ubuntu linux experience. I really enjoyed learning about it and found its documentation really helpful and detailed with almost everything I needed. The OS itself was really simple and friendly too which was very nice. I did find I was very suprised by what was and wasnt included as I slowly learnt what came from debian and what didnt. Alpine didnt have sudo, any sort of file transfer systems or any of bash's basic features and learning that these didnt exist then seeing the base programs they were built out of was really interesting (for example sudo seems like its just a complex wrapper for su, a command that switches users).</p>
<p>Alpine essentially, from a users perspective, is made of busybox (a very basic shell that I also found runs within ubuntu after a kernel panic) and openrc which just controls how background services run. These two programs did everything I needed with openrc managing lighttpd and busybox letting me interact with the os and running a startup script for me to pull from github and rebuild/run the C++ code.</p>
</content>
</entry><entry>
<title>CNSelfie</title>
<link href="https://rosia.me/CNCMachine.html"/>
<id>https://rosia.me/CNCMachine.html</id>
<updated>2023-10-11T12:32:04Z</updated>
<content type="html">
<h1>CNSelfie</h1>
<p>This was my first project created at my univeristy's robotics society. Created as an interactive robot for kids coming to university open days,
it would display a camera view and detect outlines then when a photo was taken with it it would generate gcode from these lines to direct
the society's CNC machine to draw out what it saw. The idea being that kids could have drawings of themselves made by a robot they could take home.</p>
<p>It was finished over the course of two weeks in collaboration with a friend at the society.</p>
<h2>Overview</h2>
<p>The program worked using <a href="https://opencv.org/">OpenCV</a>. OpenCV would detect sharp edges and produce an black and white image, this would then by converted into a vector
which was then converted into gcode as paths for the CNC machine. I found a <a href="https://github.com/PadLex/SvgToGcode">library</a> for converting between vectors and gcode but found it didnt have all the functionality I needed
so ended up adding alot of extra methods and rewriting a few of them.</p>
<p>This GCode was then sent by <a href="https://github.com/winder/Universal-G-Code-Sender">Universal Gcode Sender</a> to our CNC machine.</p>
<h2>Gallery</h2>
<p>fkuck</p>
</content>
</entry><entry>
<title>aberSailBot</title>
<link href="https://rosia.me/SailBot.html"/>
<id>https://rosia.me/SailBot.html</id>
<updated>2023-10-08T22:53:52Z</updated>
<content type="html">
<h1>aberSailBot</h1>
<p>SailBot is a university society I joined in my first year. They build and race robot sailboats. I joined the society as it seemed like a really interesting challenge building robots that have to deal with the insane variety of variables the outside world offers. Especially in the ocean where you rely on those to move.</p>
<p>I spent the first year in a team of 3 building a small boat we called &quot;floating point&quot;. We started from a polystyrene hull and had to do a number of steps to build it, none of which any of us had any experience with:</p>
<ul>
<li>Coat the hull in resin</li>
<li>Build a sail</li>
<li>Design and 3d print parts</li>
<li>Write ESP32 code to run it using a digital compass and gps</li>
<li>Design a mechanism for its steering</li>
</ul>
<p>We were building these along with other teams, the idea being at the end of the building period they would be tested and raced in a small still water pool near the local docks. By the end of the year only our team and one other had finished our boats so we tested them in a less competetive manner at the docks. Our boat failed to find a gps connection and was unable to said but the developer from the other team lent us his software which allowed remote control over wifi and that was used instead.</p>
<p><img src="BoatingTeams.jpg" alt="Image of both teams on the day"></p>
</content>
</entry><entry>
<title>Aber Robotics Soc</title>
<link href="https://rosia.me/RoboticsSociety.html"/>
<id>https://rosia.me/RoboticsSociety.html</id>
<updated>2023-10-11T12:32:01Z</updated>
<content type="html">
<h1>Aber Robotics Soc</h1>
<p>The Aber Robotics Society is a small society of friends at my university who meet every wednesday in a robotics lab and work on their projects. I originally joined to learn basic electronics but found a lot of good friends there and a really nice sense of community.</p>
<p>While there I have learnt most of my knowledge of robotics and electronics and worked on a number of projects including a basic two wheeled remote control robot (my first project where I learnt the basics of electronics), a program that takes photos of people, converts the images to lines and g-code and sends them to a CNC machine that draws the images and a watering system for plants I keep at my house.</p>
<p>During my second year I have gained the role of quatermaster which leaves me in charge of the robotics cupboard where all of the societies older projects are left. I took the role hoping to archive the projects and build wikis for each project, encouraging members to document their work better for later members to come back to though this somewhat took a back seat as the president developed an amazing system that logs the owners of projects and peoples permissions for the projects using qr-codes and additionally we began to share more of our cupboard and its stored resources with additional societies.</p>
<h2>Projects</h2>
<p>This site documents a few different projects I've worked on whilst at the society, including:</p>
<ul>
<li><a href="/CNCMachine.html">CNSelfie</a></li>
<li>thats it</li>
</ul>
</content>
</entry><entry>
<title>aberCompSoc</title>
<link href="https://rosia.me/aberCompSoc.html"/>
<id>https://rosia.me/aberCompSoc.html</id>
<updated>2023-10-08T23:05:20Z</updated>
<content type="html">
<h1>aberCompSoc</h1>
<p>This year I have become president of my university's compting society or &quot;aberCompSoc&quot;. The society is mostly a body to provide a space for students to program and meet other passionate programmers to share and work on projects with. Additionally to this we are also a branch of the <a href="https://www.bcs.org/">BVS</a> who we often run events with including hosting talks from professionals with links to the universities and also &quot;Show and Tell&quot; events where programmers can run short talks about the work they've been doing.</p>
<p>My hope for the society is to provide the spaces coding clubs used to provide for the coding community at my old schools, where students would just sit and have conversations around their passions whilst also working on their projects and making friends they could work together with and feel comfortable around.</p>
</content>
</entry><entry>
<title>SBS Internship</title>
<link href="https://rosia.me/SBSWork.html"/>
<id>https://rosia.me/SBSWork.html</id>
<updated>2023-09-23T12:46:18Z</updated>
<content type="html">
<h1>SBS Internship</h1>
<h2>What it is</h2>
<p>Inbetween my time at University and Post-16 I took a gap year where I interned at Skipton Building Society as a software tester. This was a paid 9 month internship where I waspushed for automated testing
with SmartBears TestComplete system and worked with their API team to ensure their software remained stable whilst they slowly worked through all their API's transitioning them from TIBCO to Azure.</p>
<p>I was also asked to research Gherkin and Behaviour Driven Development to see if it would be worth transitioning to, helped to run a coding club to educate other members of the Society and later set-up
the Society's standards for all their future automated testing.</p>
<h2>What I did</h2>
<p>I was initially hired to experiment with the idea of automating the Society's testing using SmartBear's TestComplete system. I taught myself a large portion of the tools over the course of a week
and then worked with one other collegue who came from a testing background to fully automate the UI testing of the Ds customer portal system.
From this we decided the tool may be worth using across the wider Society and worked with individual agile scrum teams to help them automate their testing. During this time I produced a presentation
on the inner workings of TestComplete and its benefits to the Society's senior developers convincing them of its worth. I also worked with my collegue to produce an educational talk, some tools and documentation
in order to educate other testers on the system and encourage widespread use.</p>
<p>After 3 months of working on TestComplete I was assigned to an Agile Hub in order to help them with their testing on the side whilst still working on TestComplete. This team was built to slowly
transition all of the societies APIs from TIBCO to Azure and my job was to ensure any software interacting with the API currently being replaced would still work when the team had finished. This was
done through large amounts of manual regression tests and a few automated tests where their work overlapped with my other TestComplete work. This was somewhat challenging for me to begin with as I had
little understanding of alot of the software I was testing and I found myself somewhat anxious when communicating with the team, however I slowly improved at this over time and ended up working with relative
efficiency. I did this through pushing myself to ask people questions and eventually reorganising my time by meeting with all the teams developers at the very start of an API development cycle to have a full
conversation with all of them on what needed to be tested and how rather than individually asking developers and having to compile the individual comments of each developer.</p>
<p>On the side of this I also ran a talk to teach testers the basics of javascript to increase the flexibility of their automated tests and later helped some lead developers to run a bi-weekly &quot;Coding Club&quot; to
educate testers on programming with C#. One of these lead developers also tasked me with researching into the testing language &quot;Gherkin&quot; and the concept of Behaviour Driven Development, I spent 2 months
experimenting with it on the side whilst doing my regular work and produced a presentation to them and a group of senior testers where I then facilitated more conversation on the viability of the system its
usefulness to the Society. I then organised regular meetings to continue the discussion.</p>
<h2>Skills Learnt</h2>
<p>Throughout this internship I feel that my social skills developed greatly, I got alot better at giving critisism, being willing to ask questions and admit I didnt understand things and developed my self-confidence.
I also learnt a large amount about Microsoft's Azure Cloud Systems and manual and automated testing. I also gained real experience of an Agile working environment which I greatly enjoyed and I developed a much
stronger understanding of APIs and back-end programming which I had never previously looked into.</p>
<p>Multiple times during my work there I was requested to stay as an apprentice rather than go to University, I did turn this offer down but I intend to work for them over summers and during my industry year at
University as I found it an incredibly friendly and safe feeling place with a really healthy culture. Their attitude towards change was very exciting to work in and multiple times I found I would make a mistake
and be worried my teams would be annoyed or upset only to find they wouldnt even consider it an issue and with zero negative responses they would just ask how they could help to fix it and help me plan a solution.</p>
</content>
</entry><entry>
<title>Example Post</title>
<link href="https://rosia.me/TestFullArticle.html"/>
<id>https://rosia.me/TestFullArticle.html</id>
<updated>2023-09-29T12:49:11Z</updated>
<content type="html">
<h1>Example Post</h1>
<p>This is where a basic summary of the post would go if I wanted to add one</p>
<p>Normal text would then go here wow</p>
<h2>A subheader would go here</h2>
<p>the info under the subheader would go here wow. Oh look! here comes a page break</p>
<hr>
<p>omg wow that worked! heres another:</p>
<hr>
<p>code would go here like this</p>
<pre><code>int main()
{
    std::cout &lt;&lt; &quot;hello world!&quot; &lt;&lt; std::endl;
}
</code></pre>
<h2>One last thing</h2>
<p>...
moomin</p>
<p><img src="moomin.png" alt="moomin"></p>
</content>
</entry></feed>
